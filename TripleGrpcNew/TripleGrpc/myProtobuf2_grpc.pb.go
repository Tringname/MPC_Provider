// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package TripleGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetTripleClient is the client API for GetTriple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetTripleClient interface {
	GetIntTriple(ctx context.Context, in *GetTripleRequest, opts ...grpc.CallOption) (*TripleList, error)
	GetBitTriple(ctx context.Context, in *GetTripleRequest, opts ...grpc.CallOption) (*BitTripleList, error)
	GetBytesTriple(ctx context.Context, in *GetBytesTripleRequest, opts ...grpc.CallOption) (*BytesTripleList, error)
}

type getTripleClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTripleClient(cc grpc.ClientConnInterface) GetTripleClient {
	return &getTripleClient{cc}
}

func (c *getTripleClient) GetIntTriple(ctx context.Context, in *GetTripleRequest, opts ...grpc.CallOption) (*TripleList, error) {
	out := new(TripleList)
	err := c.cc.Invoke(ctx, "/TripleGrpc.GetTriple/GetIntTriple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTripleClient) GetBitTriple(ctx context.Context, in *GetTripleRequest, opts ...grpc.CallOption) (*BitTripleList, error) {
	out := new(BitTripleList)
	err := c.cc.Invoke(ctx, "/TripleGrpc.GetTriple/GetBitTriple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTripleClient) GetBytesTriple(ctx context.Context, in *GetBytesTripleRequest, opts ...grpc.CallOption) (*BytesTripleList, error) {
	out := new(BytesTripleList)
	err := c.cc.Invoke(ctx, "/TripleGrpc.GetTriple/GetBytesTriple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetTripleServer is the server API for GetTriple service.
// All implementations must embed UnimplementedGetTripleServer
// for forward compatibility
type GetTripleServer interface {
	GetIntTriple(context.Context, *GetTripleRequest) (*TripleList, error)
	GetBitTriple(context.Context, *GetTripleRequest) (*BitTripleList, error)
	GetBytesTriple(context.Context, *GetBytesTripleRequest) (*BytesTripleList, error)
	mustEmbedUnimplementedGetTripleServer()
}

// UnimplementedGetTripleServer must be embedded to have forward compatible implementations.
type UnimplementedGetTripleServer struct {
}

func (UnimplementedGetTripleServer) GetIntTriple(context.Context, *GetTripleRequest) (*TripleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntTriple not implemented")
}
func (UnimplementedGetTripleServer) GetBitTriple(context.Context, *GetTripleRequest) (*BitTripleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBitTriple not implemented")
}
func (UnimplementedGetTripleServer) GetBytesTriple(context.Context, *GetBytesTripleRequest) (*BytesTripleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBytesTriple not implemented")
}
func (UnimplementedGetTripleServer) mustEmbedUnimplementedGetTripleServer() {}

// UnsafeGetTripleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetTripleServer will
// result in compilation errors.
type UnsafeGetTripleServer interface {
	mustEmbedUnimplementedGetTripleServer()
}

func RegisterGetTripleServer(s grpc.ServiceRegistrar, srv GetTripleServer) {
	s.RegisterService(&GetTriple_ServiceDesc, srv)
}

func _GetTriple_GetIntTriple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTripleServer).GetIntTriple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TripleGrpc.GetTriple/GetIntTriple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTripleServer).GetIntTriple(ctx, req.(*GetTripleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTriple_GetBitTriple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTripleServer).GetBitTriple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TripleGrpc.GetTriple/GetBitTriple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTripleServer).GetBitTriple(ctx, req.(*GetTripleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTriple_GetBytesTriple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBytesTripleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTripleServer).GetBytesTriple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TripleGrpc.GetTriple/GetBytesTriple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTripleServer).GetBytesTriple(ctx, req.(*GetBytesTripleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetTriple_ServiceDesc is the grpc.ServiceDesc for GetTriple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetTriple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TripleGrpc.GetTriple",
	HandlerType: (*GetTripleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntTriple",
			Handler:    _GetTriple_GetIntTriple_Handler,
		},
		{
			MethodName: "GetBitTriple",
			Handler:    _GetTriple_GetBitTriple_Handler,
		},
		{
			MethodName: "GetBytesTriple",
			Handler:    _GetTriple_GetBytesTriple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myProtobuf2.proto",
}
